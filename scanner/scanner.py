import requests
import logging
from .fetch_data import fetch_ohlcv
from .indicator import calculate_signals
from .get_top_coins import get_top_100_excluding_stables
from config import NTFY_TOPIC

logger = logging.getLogger(__name__)

def format_price(price: float) -> str:
    if price >= 100:
        return f"{price:.2f}"
    elif price >= 1:
        return f"{price:.4f}"
    elif price >= 0.01:
        return f"{price:.6f}"
    else:
        return f"{price:.8f}"


def scan_and_send(mode: str = "One per Trend") -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–∞–Ω–µ—Ä: –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Ç–æ–ø–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã."""
    coins = get_top_100_excluding_stables()
    signals = []

    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ {mode}, –º–æ–Ω–µ—Ç –Ω–∞–π–¥–µ–Ω–æ: {len(coins)}")

    for coin in coins:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ OHLCV
            df = fetch_ohlcv(coin["symbol"])
            if df is None or len(df) < 200:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {coin['symbol']} ‚Äî –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
                continue

            # –°—á–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            df = calculate_signals(df, mode=mode)
            last_row = df.iloc[-1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            if last_row["long_signal"]:
                message = (
                    f"üü¢ LONG —Å–∏–≥–Ω–∞–ª\n"
                    f"–ú–æ–Ω–µ—Ç–∞: {coin['symbol']} ({coin['name']})\n"
                    f"üíµ –¶–µ–Ω–∞: {format_price(last_row['close'])} USDT"
                )
                signals.append(message)
                send_ntfy(message, coin["symbol"])
                logger.info(f"LONG —Å–∏–≥–Ω–∞–ª –¥–ª—è {coin['symbol']}")

            elif last_row["short_signal"]:
                message = (
                    f"üî¥ SHORT —Å–∏–≥–Ω–∞–ª\n"
                    f"–ú–æ–Ω–µ—Ç–∞: {coin['symbol']} ({coin['name']})\n"
                    f"üíµ –¶–µ–Ω–∞: {format_price(last_row['close'])} USDT"
                )
                signals.append(message)
                send_ntfy(message, coin["symbol"])
                logger.info(f"SHORT —Å–∏–≥–Ω–∞–ª –¥–ª—è {coin['symbol']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {coin['symbol']}: {e}", exc_info=True)

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if signals:
        summary = "üì¢ –°–∏–≥–Ω–∞–ª—ã —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n\n".join(signals)
    else:
        summary = "‚úÖ –°–µ–≥–æ–¥–Ω—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç"

    send_ntfy(summary)
    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def send_ntfy(message: str, symbol: str | None = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ntfy.sh"""
    url = NTFY_TOPIC
    headers = {
        "Title": "Crypto Signal",
        "Content-Type": "text/plain; charset=utf-8",
    }

    # –í –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ ASCII (–Ω–∏–∫–∞–∫–∏—Ö —ç–º–æ–¥–∑–∏!)
    if symbol:
        tv_url = f"https://www.tradingview.com/chart/?symbol=BINANCE:{symbol}"
        headers["Actions"] = f"view, Open TradingView, {tv_url}"

    try:
        resp = requests.post(url, data=message, headers=headers, timeout=10)
        resp.raise_for_status()
        logger.info(f"ntfy: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {symbol or 'SUMMARY'}")
    except requests.RequestException as e:
        body = getattr(e.response, "text", None)
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ntfy: {e}. –û—Ç–≤–µ—Ç: {body!r}")



